buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath 'com.modrinth.minotaur:Minotaur:2.6.0'
		classpath "com.github.breadmoirai:github-release:2.4.1"
	}
}

plugins {
	id 'maven-publish'
	id 'org.quiltmc.loom' version "1.0.+"
}

if (System.getenv("MODRINTH_TOKEN")) {
	apply plugin: "com.modrinth.minotaur"
}
if (System.getenv("GITHUB_TOKEN")) {
	apply plugin: "com.github.breadmoirai.github-release"
}

archivesBaseName = project.archives_base_name

def mc_major = '1.18'
def mc = mc_major + '.2'
def default_branch = '1.18'

def origVersion = project.version
project.version = project.version + "+" + mc_major
group = project.maven_group

repositories {
	// Jitpack
	maven { url 'https://jitpack.io' }

	// Modrinth
	maven {
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	maven {
		url 'https://repo.sleeping.town'
		content {
			includeGroup 'com.unascribed'
			includeGroup 'gay.lemmaeof'
		}
	}

	// Nucleoid
	maven {
		url = uri("https://maven.nucleoid.xyz/")
	}

	// Fabric Tailor
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

	// Origins
	maven {
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
	maven {
		url = 'https://maven.cafeteria.dev'
		content {
			includeGroup 'net.adriantodt.fabricmc'
		}
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}

	maven { // Cloth Config
		url "https://maven.shedaniel.me/"
	}
	maven { // ModMenu
		url "https://maven.terraformersmc.com/"
	}
}

dependencies {
	// // Base // //
	minecraft libs.mc
	mappings variantOf(libs.qm) { classifier "intermediary-v2" }
	modImplementation libs.ql
	modImplementation libs.qsl

	// // Libraries // //
	modImplementation libs.serverTranslationsApi
	include libs.serverTranslationsApi

	modImplementation libs.lib39Core
	include libs.lib39Core

	modImplementation libs.lib39Dessicant
	include libs.lib39Dessicant

	// // Compat // //

	// Drogtor
	modCompileOnly libs.drogtor
//	modLocalRuntime libs.drogtor

	// // Fabric Tailor
	modCompileOnly libs.fabrictailor
	modLocalRuntime libs.fabrictailor

	// Origins
	modCompileOnly libs.qfapi
	modLocalRuntime libs.qfapi
	modCompileOnly(libs.origins) {
		exclude module: 'AdditionalEntityAttributes'
	}
	modLocalRuntime(libs.origins) {
		exclude module: 'calio'
		exclude module: 'AdditionalEntityAttributes'
	}
	modLocalRuntime libs.calio // Fix quilt incompatibility

	// Cardinal Components
	modCompileOnly libs.cardinal
	modCompileOnly libs.cardinalEntity

	// Pehkui
	modCompileOnly libs.pehkui
	modLocalRuntime libs.pehkui

	// Fabrication
	modCompileOnly libs.fabrication

	// Styled Nicknames
	modCompileOnly libs.styledNicknames
	modLocalRuntime libs.playerDataApi
	modLocalRuntime libs.placeholderApi
	modLocalRuntime libs.styledNicknames
	modLocalRuntime libs.styledPlayerList
}

processResources {
	final Map<String, String> map = [
			"switchy": version.toString(),
			"mc"  : libs.versions.mc.get(),
			"ql"  : libs.versions.ql.get(),
			"qfapi"  : libs.versions.qfapi.get(),
			"drogtor"  : libs.versions.drogtor.get(),
			"styledNicknames"  : libs.versions.styledNicknames.get(),
			"fabrictailor"  : libs.versions.fabrictailor.get(),
			"origins"  : libs.versions.origins.get(),
			"pehkui"  : libs.versions.pehkui.get(),
			"fabrication"  : libs.versions.fabrication.get(),
	]

	inputs.properties(map)
	filesMatching('quilt.mod.json') { expand(map) }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

jar {
	from("LICENSE.txt") {
		rename { "${it}_${archivesBaseName}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {

	}
}

if (System.getenv("MODRINTH_TOKEN")) {
	modrinth {
		token = System.getenv("MODRINTH_TOKEN")
		projectId = 'switchy'
		versionNumber = project.version
		versionName = origVersion
		versionType = 'release'
		uploadFile = remapJar
		gameVersions = [mc]
		loaders = ['quilt']
		detectLoaders = false
		dependencies {
			required.project "qsl"
			optional.project "drogtor"
			optional.project "fabrictailor"
			optional.project "pehkui"
			optional.project "origins"
			optional.project "fabrication"
			optional.project "styled-nicknames"
		}
		changelog = "Changelog: https://github.com/sisby-folk/switchy/releases/tag/v" + origVersion
		syncBodyFrom = rootProject.file("README.md").text
	}
}

if (System.getenv("GITHUB_TOKEN")) {
	githubRelease {
		token System.getenv("GITHUB_TOKEN")
		owner "sisby-folk"
		repo "switchy"
		tagName 'v' + origVersion
		releaseName origVersion
		targetCommitish default_branch
		draft false
		prerelease false
		releaseAssets remapJar.archiveFile
		allowUploadToExisting true
		generateReleaseNotes true
	}
	tasks.githubRelease.dependsOn remapJar
}
